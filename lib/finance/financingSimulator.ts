export interface FinancingParameters {
  principal: number; // loan amount
  annualRate: number; // interest rate as decimal (e.g., 0.05 for 5%)
  termMonths: number; // number of monthly payments
  /**
   * Optional expected monthly savings or revenue generated by the financed item.
   * If provided and greater than the monthly payment, a payback period is
   * calculated.
   */
  monthlySavings?: number;
}

export interface FinancingResult {
  /** Monthly payment required to amortize the loan */
  monthlyPayment: number;
  /**
   * Optional payback period in months. Only returned when `monthlySavings` is
   * provided and is greater than the calculated monthly payment.
   */
  paybackPeriodMonths?: number;
}

// Round a number to two decimal places (cents)
function roundCents(value: number): number {
  return Math.round(value * 100) / 100;
}

/**
 * Simulates a simple financing scenario.
 *
 * The calculation uses the classic amortization formula for fixed-rate loans.
 *
 * @param params Financing parameters
 */
export function simulateFinancing(
  params: FinancingParameters,
): FinancingResult {
  const { principal, annualRate, termMonths, monthlySavings } = params;
  if (principal <= 0) throw new Error('principal must be positive');
  if (annualRate < 0) throw new Error('annualRate must be non-negative');
  if (termMonths <= 0) throw new Error('termMonths must be positive');

  const monthlyRate = annualRate / 12;

  // Handle zero interest specially to avoid division by zero
  const rawMonthlyPayment =
    monthlyRate === 0
      ? principal / termMonths
      : (principal * monthlyRate) /
        (1 - Math.pow(1 + monthlyRate, -termMonths));
  const monthlyPayment = roundCents(rawMonthlyPayment);

  const result: FinancingResult = {
    monthlyPayment,
  };

  if (monthlySavings !== undefined && monthlySavings > monthlyPayment) {
    const paybackMonths = Math.ceil(
      principal / (monthlySavings - rawMonthlyPayment),
    );
    result.paybackPeriodMonths = paybackMonths;
  }

  return result;
}
