#!/usr/bin/env tsx

/**
 * Script TypeScript para testar configura√ß√£o do Ollama
 * Verifica se os modelos necess√°rios est√£o dispon√≠veis e funcionais
 */

import { spawn } from 'node:child_process';

const REQUIRED_MODELS = [
  'qwen3:30b',
  'falcon3:latest',
  'llama3.2-vision:latest',
  'mistral:latest',
  'llava:latest'
];

async function checkOllamaService(): Promise<string | null> {
  console.log('üîç Verificando servi√ßo Ollama...');

  return new Promise((resolve) => {
    const checkProcess = spawn('ollama', ['list'], {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    let output = '';
    checkProcess.stdout.on('data', (data) => {
      output += data.toString();
    });

    checkProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ Ollama est√° funcionando');
        resolve(output);
      } else {
        console.log('‚ùå Ollama n√£o est√° respondendo');
        resolve(null);
      }
    });

    checkProcess.on('error', () => {
      console.log('‚ùå Ollama n√£o est√° instalado ou n√£o est√° no PATH');
      resolve(null);
    });
  });
}

async function testModel(modelName: string): Promise<boolean> {
  console.log(`üß™ Verificando modelo: ${modelName}`);

  return new Promise((resolve) => {
    // Simplesmente verificar se o modelo existe (n√£o executar)
    const testProcess = spawn('ollama', ['show', modelName], {
      stdio: ['pipe', 'pipe', 'pipe']
    });

    testProcess.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${modelName} est√° dispon√≠vel`);
        resolve(true);
      } else {
        console.log(`‚ùå ${modelName} n√£o est√° dispon√≠vel`);
        resolve(false);
      }
    });

    testProcess.on('error', (error) => {
      console.log(`‚ùå Erro ao verificar ${modelName}: ${error.message}`);
      resolve(false);
    });

    // Timeout ap√≥s 2 segundos
    setTimeout(() => {
      testProcess.kill();
      console.log(`‚è∞ Timeout ao verificar ${modelName}`);
      resolve(false);
    }, 2000);
  });
}

async function runOllamaTests() {
  console.log('üöÄ Iniciando testes de configura√ß√£o Ollama\n');

  // Verificar servi√ßo
  const listOutput = await checkOllamaService();
  if (!listOutput) {
    console.log('\n‚ùå Configura√ß√£o do Ollama falhou');
    return;
  }

  // Extrair modelos dispon√≠veis
  const availableModels = listOutput
    .split('\n')
    .slice(1) // Pular header
    .map(line => line.split(/\s+/)[0])
    .filter(name => name && name !== 'NAME');

  console.log('\nüì¶ Modelos dispon√≠veis:', availableModels);

  // Verificar modelos necess√°rios
  const missingModels = REQUIRED_MODELS.filter(model => !availableModels.includes(model));

  if (missingModels.length > 0) {
    console.log('\n‚ö†Ô∏è  Modelos faltando:', missingModels);
    console.log('üí° Para instalar: ollama pull <model-name>');
  } else {
    console.log('\n‚úÖ Todos os modelos necess√°rios est√£o instalados');
  }

  // Testar modelos funcionais (apenas os que est√£o dispon√≠veis)
  console.log('\nüß™ Testando funcionalidade dos modelos...');
  const testResults: Record<string, boolean> = {};

  for (const model of REQUIRED_MODELS) {
    if (availableModels.includes(model)) {
      testResults[model] = await testModel(model);
    } else {
      testResults[model] = false;
      console.log(`‚è≠Ô∏è  Pulando teste de ${model} (n√£o instalado)`);
    }
  }

  // Resumo
  console.log('\nüìä Resumo dos testes:');
  const workingModels = Object.entries(testResults).filter(([_, working]) => working);
  const brokenModels = Object.entries(testResults).filter(([_, working]) => !working);

  console.log(`‚úÖ Modelos funcionais: ${workingModels.length}/${REQUIRED_MODELS.length}`);
  workingModels.forEach(([model]) => console.log(`   - ${model}`));

  if (brokenModels.length > 0) {
    console.log(`‚ùå Modelos com problemas: ${brokenModels.length}`);
    brokenModels.forEach(([model]) => console.log(`   - ${model}`));
  }

  console.log('\nüéâ Testes do Ollama conclu√≠dos!');
  console.log('\nüí° Para usar Ollama no projeto:');
  console.log('   AI_GATEWAY_API_KEY=local pnpm run dev');
}

if (require.main === module) {
  runOllamaTests().catch(console.error);
}

export { runOllamaTests, REQUIRED_MODELS };